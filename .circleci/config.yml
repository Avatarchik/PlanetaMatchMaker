version: 2.1

executors:
  alpine_cpp:
    working_directory: ~/workspace
    docker:
      - image: cdec/planeta-match-maker:dev-alpine
  linux_csharp:
    working_directory: ~/workspace
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
  unity:
    working_directory: ~/workspace
    docker:
      - image: gableroux/unity3d:2019.3.13f1

commands:
  build_server_linux:
    parameters:
      id:
        type: string
      compiler:
        type: string
    steps:
      - checkout
      - run:
          name: Make build directory
          command: mkdir build_server_linux_<< parameters.id >>
      - run:
          name: Create build files
          working_directory: build_server_linux_<< parameters.id >>
          command: cmake .. -DCMAKE_CXX_COMPILER=<< parameters.compiler >>
      - run:
          name: Build binaries
          working_directory: build_server_linux_<< parameters.id >>
          command: "make -j$(grep cpu.cores /proc/cpuinfo | sort -u | sed 's/[^0-9]//g')"
      - persist_to_workspace:
          root: "."
          paths:  
            - "build_server_linux_<< parameters.id >>"

  test_server_linux:
    parameters:
      id:
        type: string
    steps:
      - attach_workspace:
          at: "."
      - run:
          name: Execute unit tests
          working_directory: build_server_linux_<< parameters.id >>
          command: BOOST_TEST_LOGGER="JUNIT,,planeta_match_maker_server_linux_<< parameters.id >>_test_log.xml" ctest
      - run:
          name: Copy test log
          command: |
            mkdir -p ~/test-results/junit/
            cp build_server_linux_<< parameters.id >>/PlanetaMatchMakerServerTest/planeta_match_maker_server_linux_<< parameters.id >>_test_log.xml ~/test-results/junit/
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  build_client_linux:
    parameters:
      id:
        type: string
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build PlanetaMatchMakerClient -c Release -o build_client_linux_<< parameters.id >>
      - persist_to_workspace:
          root: "."
          paths:
            - "build_client_linux_<< parameters.id >>"

  test_client_linux:
    parameters:
      id:
        type: string
    steps:
      - checkout
      - run:
          name: Build and run unit tests
          command: dotnet test PlanetaMatchMakerClientTest -c Release -l junit
      - run:
          name: Copy test log
          command: |
            mkdir -p ~/test-results/junit/
            cp PlanetaMatchMakerClientTest/TestResults/TestResults.xml ~/test-results/junit/planeta_match_maker_client_linux_test_<< parameters.id >>.xml
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  build_test_client_linux:
    parameters:
      id:
        type: string
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet publish PlanetaMatchMakerTestClient -c Release --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -r linux-x64 -o build_test_client_linux_<< parameters.id >>
      - persist_to_workspace:
          root: "."
          paths:
            - "build_test_client_linux_<< parameters.id >>"

  # build_unity_client:
  #   parameters:
  #     id:
  #       type: string
  #   steps:
  #     - checkout
  #     - run:
  #         name: Move
  #         command: cd PlanetaMatchMakerTest
  #     - run:
  #         name: Create build files
  #         working_directory: build_unity_client_<< parameters.id >>
  #         command: cmake .. -DCMAKE_CXX_COMPILER=<< parameters.compiler >>
  #     - run:
  #         name: Build binaries
  #         working_directory: build_unity_client_<< parameters.id >>
  #         command: make
  #     - persist_to_workspace:
  #         root: "."
  #         paths:
  #           - "build_unity_client_<< parameters.id >>"

jobs:
  build_server_alpine_clang:
    executor: alpine_cpp
    steps:
      - build_server_linux:
          id: alpine_clang
          compiler: clang++

  test_server_alpine_clang:
    executor: alpine_cpp
    steps:
      - test_server_linux:
          id: alpine_clang

  build_client_linux:
    executor: linux_csharp
    steps:
      - build_client_linux:
          id: general

  test_client_linux:
    executor: linux_csharp
    steps:
      - test_client_linux:
          id: general

  build_test_client_linux:
    executor: linux_csharp
    steps:
      - build_test_client_linux:
          id: general

  # build_unity_client:
  #   executor: unity
  #   steps:
  #     - build_unity_client:
  #         id: general

workflows:
  build_and_test_server:
    jobs:
      - build_server_alpine_clang:
          filters:
            branches:
              only: master

      - test_server_alpine_clang:
          requires:
            - build_server_alpine_clang
          filters:
            branches:
              only: master

  build_and_test_client:
    jobs:
      - build_client_linux:
          filters:
            branches:
              only: master

      - test_client_linux:
          requires:
            - build_client_linux
          filters:
            branches:
              only: master

  build_and_test_test_client:
    jobs:
      - build_test_client_linux:
          filters:
            branches:
              only: master

  # build_and_test_unity_client:
  #   jobs:
  #     - build_unity_client:
  #         filters:
  #           branches:
  #             only: master
