@startuml

title List Room Standard Sequence

participant MatchingServer
participant GameHost
participant Client1
participant Client2

group Authentication
GameHost -> MatchingServer : authentication_request
activate MatchingServer
MatchingServer -> MatchingServer: authentication
MatchingServer --> GameHost : authentication_reply[ok or error]
deactivate MatchingServer
end

GameHost -> MatchingServer : create_room_request
activate MatchingServer
MatchingServer -> MatchingServer : create room
MatchingServer --> GameHost : create_room_reply
deactivate MatchingServer

group Game

==Start Lobby==

loop every seconds
GameHost -> MatchingServer : update_room_status_request[open room, player count]
activate MatchingServer
MatchingServer --> GameHost : update_room_status_reply[ok or error]
MatchingServer -> MatchingServer : update room information
deactivate MatchingServer
end

group Join Client1

group Authentication
Client1 -> MatchingServer : authentication_request
activate MatchingServer
MatchingServer -> MatchingServer: authentication
MatchingServer --> Client1 : authentication_reply[ok or error]
deactivate MatchingServer
end

Client1->MatchingServer : list_room_request
activate MatchingServer
MatchingServer --> Client1 : list_room_reply
...
MatchingServer --> Client1 : list_room_reply
deactivate MatchingServer

Client1->MatchingServer : join_room_request
activate MatchingServer
MatchingServer --> Client1 : join_room_reply
deactivate MatchingServer
Client1->GameHost : connect

end

GameHost<->Client1 : send and receive game data

group Join Client2

note over MatchingServer, Client2: Client join process...
...

end

GameHost<->Client1 : send and receive game data

GameHost<->Client2 : send and receive game data
note right: Disconnected
destroy Client2

note right of GameHost: Pause accepting new client
GameHost -> MatchingServer : update_room_status_request[close room, player count]
activate MatchingServer
MatchingServer --> GameHost : update_room_status_reply[ok or error]
MatchingServer -> MatchingServer : update room information
deactivate MatchingServer

note right of GameHost: Resume accepting new client
GameHost -> MatchingServer : update_room_status_request[open room, player count]
activate MatchingServer
MatchingServer --> GameHost : update_room_status_reply[ok or error]
MatchingServer -> MatchingServer : update room information
deactivate MatchingServer

==Start Game==

loop every seconds
GameHost -> MatchingServer : update_room_status_request[open room, player count]
activate MatchingServer
MatchingServer --> GameHost : update_room_status_reply[ok or error]
MatchingServer -> MatchingServer : update room information
deactivate MatchingServer
end

GameHost<->Client1 : send and receive game data

==Finish Game==

loop every seconds
GameHost -> MatchingServer : update_room_status_request[open room, player count]
activate MatchingServer
MatchingServer --> GameHost : update_room_status_reply[ok or error]
MatchingServer -> MatchingServer : update room information
deactivate MatchingServer
end

GameHost<->Client1 : send and receive game data

==Finish Lobby==

GameHost -> MatchingServer : update_room_status_request[remove room]
activate MatchingServer

end

MatchingServer -> MatchingServer : remove room
deactivate MatchingServer

@enduml